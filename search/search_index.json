{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Bienvenido a la Gu\u00eda de Despliegue Web","text":"<p>Este sitio documenta las pr\u00e1cticas y ejercicios realizados en el marco del aprendizaje sobre despliegue web. </p>"},{"location":"#que-encontraras-en-este-sitio","title":"\u00bfQu\u00e9 encontrar\u00e1s en este sitio?","text":"<ul> <li> <p>Introducci\u00f3n al Despliegue Web   Una visi\u00f3n general sobre los conceptos b\u00e1sicos y la importancia del despliegue web en el desarrollo de software.</p> </li> <li> <p>Herramientas y Tecnolog\u00edas   Exploraci\u00f3n de tecnolog\u00edas clave como servidores web, contenedores, sistemas de control de versiones y servicios en la nube.</p> </li> <li> <p>Pr\u00e1cticas y Ejercicios   Gu\u00edas paso a paso que cubren la configuraci\u00f3n de servidores, despliegue en contenedores Docker, automatizaci\u00f3n con CI/CD, entre otros.</p> </li> <li> <p>Soluci\u00f3n de Problemas   Preguntas frecuentes y estrategias para abordar problemas comunes durante el despliegue.</p> </li> </ul>"},{"location":"#todas-las-practicas-realizadas-por-mario-jurado-ayuso","title":"Todas las practicas Realizadas por Mario Jurado Ayuso","text":""},{"location":"Practica4_1/","title":"Pr\u00e1ctica 4.1 - Configuraci\u00f3n de un servidor DNS","text":"<p>El primer paso para esta pr\u00e1ctica sera conectar nuestra maquina por ssh.</p> <p></p>"},{"location":"Practica4_1/#instalacion-de-servidor-dns","title":"Instalaci\u00f3n de servidor DNS","text":"<p>Primero, instalamos BIND9, el software est\u00e1ndar para servidores DNS en sistemas Unix/Linux.</p> <pre><code>sudo apt-get install bind9 bind9utils bind9-doc\n</code></pre> <p></p>"},{"location":"Practica4_1/#configuracion-del-servidor","title":"Configuraci\u00f3n del servidor","text":"<p>Como solo vamos a usar ipv4 tendremos que modificar el archivo general de configuraci\u00f3n de bind</p> <p></p> <p></p> <p>El archivo de configuraci\u00f3n principal named.conf de Bind est\u00e1 en el directorio:</p> <p></p> <p></p> <p>Estos 3 includes hacen referencia a los 3 diferentes archivos donde deberemos realizar la configuraci\u00f3n.</p>"},{"location":"Practica4_1/#configuracion-namedconfoptions","title":"Configuraci\u00f3n named.conf.options","text":"<p>Tendremos que crear la copia de seguridad con el siguiente comando</p> <p></p> <p>Editamos este archivo para definir opciones globales, como las redes que podr\u00e1n realizar consultas DNS.</p> <p></p> <p>Comprobaremos si nuestra configuraci\u00f3n es correcta con los siguientes comandos:</p> <p></p>"},{"location":"Practica4_1/#configuracion-namedconflocal","title":"Configuraci\u00f3n named.conf.local","text":"<p>Aqu\u00ed definimos las zonas para las que nuestro servidor ser\u00e1 autoritativo. (en el archivosudo named.conf.local)</p> <p></p>"},{"location":"Practica4_1/#creacion-del-archivo-de-zona","title":"Creaci\u00f3n del archivo de zona","text":"<p>Creamos el archivo para la zona deaw.es.</p> <p></p> <p>se deber\u00e1 configurar de la siguiente manera</p> <p></p>"},{"location":"Practica4_1/#creacion-del-archivo-de-zona-para-la-resolucion-inversa","title":"Creaci\u00f3n del archivo de zona para la resoluci\u00f3n inversa","text":"<p>En este paso crearemos el archivo para la resoluci\u00f3n inversa.</p> <p>Deberemos a\u00f1adir lo siguiente en el mismo archivo de configuraci\u00f3n</p> <p></p> <p>Adem\u00e1s se crear\u00e1 el archivo correspondiente con su configuracion:</p> <p></p> <p></p>"},{"location":"Practica4_1/#comprobacion-de-las-configuraciones","title":"Comprobaci\u00f3n de las configuraciones","text":"<p>Comprobaremos que la zona directa e inversa estan correctas segun estos comandos</p> <p></p> <p>de esta manera significa que est\u00e1 correcto</p> <p>Reiniciamos el servicio y comprobamos el estado:</p> <p></p>"},{"location":"Practica4_1/#comprobacion-de-las-resoluciones-y-de-las-consultas","title":"Comprobaci\u00f3n de las resoluciones y de las consultas","text":"<p>Podemos comprobar que todo est\u00e1 correcto desde los clientes, con los comandos dig y nslookup las resoluciones directas e inversas de la siguiente forma.</p> <p>Es importante que el cliente est\u00e9 configurado para usarse como servidor DNS para que funcione</p> <p></p>"},{"location":"Practica4_1/#cuestiones-finales","title":"Cuestiones finales","text":"<p>Cuesti\u00f3n 1</p> <p>Si un cliente de una red diferente intenta hacer uso de tu DNS, no le funcionar\u00e1 a menos que hayas configurado el servidor para permitirlo. En la configuraci\u00f3n de BIND, espec\u00edficamente en la secci\u00f3n acl y allow-recursion, puedes ver si se permiten consultas recursivas solo desde ciertas redes. Por ejemplo, si en named.conf.options tienes una ACL como allow-recursion { 192.168.X.0/24; };, solo los clientes de esa subred podr\u00e1n hacer consultas recursivas. Si un cliente fuera de esa red intenta realizar una consulta, no podr\u00e1 resolver nombres a menos que tenga permisos espec\u00edficos.</p> <p>Cuesti\u00f3n 2</p> <p>Permitir consultas recursivas en la configuraci\u00f3n de un servidor DNS es necesario para que los clientes puedan consultar dominios que no est\u00e1n almacenados localmente en el servidor. Si no se permiten consultas recursivas, el servidor solo podr\u00e1 resolver dominios para los cuales tiene una zona configurada. Al habilitar la recursi\u00f3n, el servidor DNS puede realizar consultas hacia otros servidores DNS en Internet para resolver nombres que no conoce, haciendo que el cliente reciba una respuesta correcta.</p> <p>Cuesti\u00f3n 3</p> <p>El servidor DNS que acabamos de montar s\u00ed es autoritativo. Esto se debe a que hemos configurado una zona en el archivo de configuraci\u00f3n de BIND con la directiva type master, lo que indica que el servidor tiene control completo sobre esa zona y es responsable de responder consultas para ella de manera autoritativa.</p> <p>Cuesti\u00f3n 4</p> <p>La directiva $ORIGIN se encuentra dentro de los archivos de zona de BIND y se utiliza para especificar el dominio base para los registros de esa zona. Su prop\u00f3sito es simplificar la configuraci\u00f3n, ya que permite que los registros de la zona no tengan que especificar el dominio completo en cada entrada. Si $ORIGIN est\u00e1 configurado como deaw.es., entonces cualquier nombre sin un dominio completo ser\u00e1 interpretado como nombre.deaw.es..</p> <p>Cuesti\u00f3n 5</p> <p>No, una zona no es id\u00e9ntica a un dominio. Un dominio es una parte de la jerarqu\u00eda del sistema de nombres de dominio (DNS), mientras que una zona es una secci\u00f3n de esa jerarqu\u00eda que un servidor DNS administra. Una zona puede contener uno o m\u00e1s dominios, pero tambi\u00e9n puede incluir subzonas, por ejemplo, el dominio deaw.es puede tener una zona de DNS que cubra deaw.es y sus subdominios.</p> <p>Cuesti\u00f3n 6</p> <p>No, los archivos de zona en un servidor esclavo no deben ser editados directamente. Un servidor DNS esclavo o secundario obtiene sus archivos de zona de un servidor maestro. Los cambios en los archivos de zona deben hacerse en el servidor maestro, y luego el servidor esclavo los recibir\u00e1 mediante transferencia de zona.</p> <p>Cuesti\u00f3n 7</p> <p>Tener m\u00e1s de un servidor esclavo para una misma zona proporciona alta disponibilidad y redundancia. Si un servidor esclavo falla, otro servidor esclavo puede tomar su lugar, asegurando que las consultas DNS sigan funcionando correctamente. Tambi\u00e9n mejora el rendimiento, ya que las consultas pueden distribuirse entre varios servidores esclavos.</p> <p>Cuesti\u00f3n 8</p> <p>Existen 13 servidores ra\u00edz principales (denominados A a M), aunque estos est\u00e1n distribuidos y replicados por todo el mundo a trav\u00e9s de diferentes servidores para mejorar la disponibilidad. Estos servidores son responsables de dirigir las consultas a los servidores de nombres autoritativos para los dominios de nivel superior (.com, .org, etc.).</p> <p>Cuesti\u00f3n 9</p> <p>Una consulta iterativa de referencia es cuando un servidor DNS, al no tener la informaci\u00f3n que se le solicita, devuelve la direcci\u00f3n de otro servidor DNS que podr\u00eda tener la respuesta. El cliente realiza entonces una nueva consulta a ese servidor. Es decir, el servidor original no responde directamente a la consulta, sino que dirige al cliente a otro servidor.</p> <p>Cuesti\u00f3n 10</p> <p>En una resoluci\u00f3n inversa, la direcci\u00f3n IP 172.16.34.56 se mapear\u00eda al nombre de dominio que corresponde en el archivo de zona inversa de la red 172.16.34.0/24. Para hacer esto, se busca en el archivo de zona inversa correspondiente, y si existe un registro PTR para esa direcci\u00f3n IP, se devolver\u00eda el nombre asociado. Por ejemplo, si la zona inversa estuviera configurada correctamente, el nombre podr\u00eda ser algo como 56.34.16.172.in-addr.arpa, que resolver\u00eda a un nombre como host1.deaw.es..</p>"},{"location":"Practica_GIT/","title":"ejercicios Git y GitHub","text":""},{"location":"Practica_GIT/#repositorio-deaw","title":"Repositorio DEAW","text":"<p>Empezaremos Creando un repositorio en nuestro GitHub llamado DEAW.</p> <p></p> <p>Clonamos el repositorio en local.</p> <p></p>"},{"location":"Practica_GIT/#readmemd","title":"Readme.md","text":"<p>dentro de nuestro repositorio local crearemos un documento README.md</p> <p></p> <p></p>"},{"location":"Practica_GIT/#commit","title":"Commit","text":"<p>haremos el primer commit con el comentario</p> <p></p>"},{"location":"Practica_GIT/#push","title":"Push","text":"<p>Subiremos los cambios al repositorio de la siguiente manera</p> <p></p> <p>para comprobarlo veremos el .md en el repositorio</p> <p></p>"},{"location":"Practica_GIT/#ignorar-archivos","title":"Ignorar archivos","text":"<p>A veces, hay archivos o carpetas que no queremos incluir en el repositorio, ya sea porque contienen informaci\u00f3n sensible (contrase\u00f1as, claves API), archivos temporales, o simplemente porque no son necesarios en GitHub.</p> <p>Para ello, usamos un archivo especial llamado .gitignore, que le dice a Git qu\u00e9 archivos y carpetas debe ignorar.</p> <p>Creamos en el repositorio local un fichero llamado privado.txt.</p> <p>Creamos en el repositorio local una carpeta llamada privada.</p> <p>Realizamos los cambios oportunos para que tanto el archivo como la carpeta sean ignorados por git.</p> <p></p> <p></p> <p></p>"},{"location":"Practica_GIT/#anadir-fichero-1txt","title":"A\u00f1adir fichero 1.txt","text":"<p>Al hacer esto, se deber\u00e1 hacer un push, para que lo muestre en el repositorio.</p> <p></p>"},{"location":"Practica_GIT/#crear-un-tag-y-subirlo-al-repositorio-remoto","title":"Crear un tag y subirlo al repositorio remoto","text":"<p>Los tags en Git se usan para marcar versiones importantes del c\u00f3digo, como hitos o lanzamientos de software.</p> <p></p> <p>En este caso, hemos creado el tag v0.1 para marcar la primera versi\u00f3n del repositorio.</p> <p></p>"},{"location":"Practica_GIT/#cuenta-de-github","title":"Cuenta de GitHub","text":"<p>Poner una foto en vuestro perfil de GitHub.</p> <p></p> <p>Poner el doble factor de autentificaci\u00f3n en vuestra cuenta de GitHub.</p> <p>La autenticaci\u00f3n en dos factores (2FA) mejora la seguridad de tu cuenta, ya que adem\u00e1s de tu contrase\u00f1a, necesitar\u00e1s un c\u00f3digo adicional para iniciar sesi\u00f3n.</p> <p>\ud83d\udccc Paso 1: Acceder a la configuraci\u00f3n de seguridad 1\ufe0f\u20e3 Inicia sesi\u00f3n en GitHub: https://github.com/ 2\ufe0f\u20e3 Ve a la esquina superior derecha y haz clic en tu foto de perfil. 3\ufe0f\u20e3 Selecciona \"Settings\" (Configuraci\u00f3n). 4\ufe0f\u20e3 En el men\u00fa izquierdo, haz clic en \"Password and authentication\" (Contrase\u00f1a y autenticaci\u00f3n).</p> <p></p>"},{"location":"Practica_GIT/#uso-social-de-github","title":"Uso Social de Github","text":"<p>Preguntar los nombres de usuario de GitHub de 2 de tus compa\u00f1eros de clase, b\u00fascalos, y sigueles.</p> <p></p> <p>Seguir los repositorios DEAW del resto de tus compa\u00f1eros.</p> <p>A\u00f1adir una estrella a los repositorios DEAW del resto de tus compa\u00f1eros.</p> <p></p>"},{"location":"Practica_GIT/#crear-una-tabla","title":"Crear una tabla","text":"<p>Crear una tabla en el fichero README.md con la informaci\u00f3n b\u00e1sica de los compa\u00f1eros de clase.</p> <p></p> <p></p>"},{"location":"Practica_GIT/#colaboradores","title":"Colaboradores","text":"<p>A\u00f1adiremos a un compa\u00f1ero de clase como colaborador del repositorio DEAW.</p> <p></p>"},{"location":"Practica_GIT/#crear-una-rama-v02-y-anadir-un-fichero-2txt","title":"Crear una rama v0.2 y a\u00f1adir un fichero 2.txt","text":"<p>Crearemos una rama v0.2 y cambiamos a esa rama.</p> <p></p> <p></p>"},{"location":"Practica_GIT/#merge-directo","title":"Merge Directo","text":"<p>Haremos un merge de la rama v0.2 en la rama master.</p> <p></p>"},{"location":"Practica_GIT/#merge-con-conflicto","title":"Merge con conflicto","text":"<p>En la rama master poner Hola en el fichero 1.txt y hacer commit.</p> <p>Posicionarse en la rama v0.2 y poner Adios en el fichero \"1.txt\" y hacer commit.</p> <p>Posicionarse de nuevo en la rama master y hacer un merge con la rama v0.2</p> <p></p> <p></p> <p>Debemos elegir una versi\u00f3n o combinarlas. por ejemplo podemos cambiar a Hola y adi\u00f3s.</p> <p></p>"},{"location":"Practica_GIT/#listado-de-ramas","title":"Listado de ramas","text":"<p>en mi caso, despu\u00e9s de hacer el merge, todo se ha fusionado correctamente, y por eso git branch --no-merged no muestra ninguna rama.</p> <p>Cuando se realiza un merge correcto de la rama v0.2 en main, esa rama ya no aparece como no fusionada</p> <p>Es normal que v0.2 no aparezca en git branch --no-merged si ya est\u00e1 fusionada.</p> <p></p>"},{"location":"Practica_GITII/","title":"Ejercicios Git y Github II","text":""},{"location":"Practica_GITII/#ejercicios-de-creacion-y-actualizacion-de-repositorios","title":"Ejercicios de Creaci\u00f3n y Actualizaci\u00f3n de Repositorios","text":""},{"location":"Practica_GITII/#ejercicio-1","title":"Ejercicio 1","text":"<p>Configurar Git definiendo el nombre del usuario, el correo electr\u00f3nico y activar el coloreado de la salida.</p> <p>Mostrar la configuraci\u00f3n final.</p> <p></p>"},{"location":"Practica_GITII/#ejercicio-2","title":"Ejercicio 2","text":"<p>Crear un repositorio nuevo con el nombre libro y mostrar su contenido.</p> <p></p>"},{"location":"Practica_GITII/#ejercicio-3","title":"Ejercicio 3","text":"<p>Comprobar el estado del repositorio.</p> <p>Crear un fichero indice.txt con el siguiente contenido:</p> <p>Cap\u00edtulo 1: Introducci\u00f3n a Git Cap\u00edtulo 2: Flujo de trabajo b\u00e1sico Cap\u00edtulo 3: Repositorios remotos Comprobar de nuevo el estado del repositorio.</p> <p>A\u00f1adir el fichero a la zona de intercambio temporal.</p> <p>Volver a comprobar una vez m\u00e1s el estado del repositorio.</p> <p></p>"},{"location":"Practica_GITII/#ejercicio-4","title":"Ejercicio 4","text":"<p>Realizar un commit de los \u00faltimos cambios con el mensaje \u201cA\u00f1adido \u00edndice del libro.\u201d y ver el estado del repositorio.</p> <p></p>"},{"location":"Practica_GITII/#ejercicio-5","title":"Ejercicio 5","text":"<p>Cambiar el fichero indice.txt para que contenga lo siguiente:</p> <p>Cap\u00edtulo 1: Introducci\u00f3n a Git Cap\u00edtulo 2: Flujo de trabajo b\u00e1sico Cap\u00edtulo 3: Gesti\u00f3n de ramas Cap\u00edtulo 4: Repositorios remotos Mostrar los cambios con respecto a la \u00faltima versi\u00f3n guardada en el repositorio.</p> <p>Hacer un commit de los cambios con el mensaje \u201cA\u00f1adido cap\u00edtulo 3 sobre gesti\u00f3n de ramas\u201d.</p> <p></p>"},{"location":"Practica_GITII/#ejercicio-6","title":"Ejercicio 6","text":"<p>Mostrar los cambios de la \u00faltima versi\u00f3n del repositorio con respecto a la anterior.</p> <p>Cambiar el mensaje del \u00faltimo commit por \u201cA\u00f1adido cap\u00edtulo 3 sobre gesti\u00f3n de ramas al \u00edndice.\u201d</p> <p>Volver a mostrar los \u00faltimos cambios del repositorio.</p> <p></p>"},{"location":"Practica_GITII/#ejercicios-de-manejo-del-historial-de-cambios","title":"Ejercicios de manejo del historial de cambios","text":""},{"location":"Practica_GITII/#ejercicio-1_1","title":"Ejercicio 1","text":"<p>Mostrar el historial de cambios del repositorio.</p> <p>Crear la carpeta capitulos y crear dentro de ella el fichero capitulo1.txt con el siguiente texto.</p> <p>Git es un sistema de control de versiones ideado por Linus Torvalds.</p> <p>A\u00f1adir los cambios a la zona de intercambio temporal.</p> <p>Hacer un commit de los cambios con el mensaje \u201cA\u00f1adido cap\u00edtulo 1.\u201d Volver a mostrar el historial de cambios del repositorio.</p> <p></p>"},{"location":"Practica_GITII/#ejercicio-2_1","title":"Ejercicio 2","text":"<p>Crear el fichero capitulo2.txt en la carpeta capitulos con el siguiente texto.</p> <p>El flujo de trabajo b\u00e1sico con Git consiste en: 1- Hacer cambios en el repositorio. 2- A\u00f1adir los cambios a la zona de intercambio temporal. 3- Hacer un commit de los cambios.</p> <p>A\u00f1adir los cambios a la zona de intercambio temporal.</p> <p>Hacer un commit de los cambios con el mensaje \u201cA\u00f1adido cap\u00edtulo 2.\u201d</p> <p>Mostrar las diferencias entre la \u00faltima versi\u00f3n y dos versiones anteriores.</p> <p></p>"},{"location":"Practica_GITII/#ejercicio-3_1","title":"Ejercicio 3","text":"<p>Crear el fichero capitulo3.txt en la carpeta capitulos con el siguiente texto.</p> <p>Git permite la creaci\u00f3n de ramas lo que permite tener distintas versiones del mismo proyecto y trabajar de manera simultanea en ellas.</p> <p>A\u00f1adir los cambios a la zona de intercambio temporal.</p> <p>Hacer un commit de los cambios con el mensaje \u201cA\u00f1adido cap\u00edtulo 3.\u201d</p> <p>Mostrar las diferencias entre la primera y la \u00faltima versi\u00f3n del repositorio.</p> <p></p>"},{"location":"Practica_GITII/#ejercicio-4_1","title":"Ejercicio 4","text":"<p>A\u00f1adir al final del fichero indice.txt la siguiente l\u00ednea:</p> <p>Cap\u00edtulo 5: Conceptos avanzados</p> <p>A\u00f1adir los cambios a la zona de intercambio temporal.</p> <p>Hacer un commit de los cambios con el mensaje \u201cA\u00f1adido cap\u00edtulo 5 al \u00edndice.\u201d.</p> <p>Mostrar qui\u00e9n ha hecho cambios sobre el fichero indice.txt.</p> <p></p>"},{"location":"Practica_GITII/#ejercicios-de-deshacer-cambios","title":"Ejercicios de deshacer cambios","text":""},{"location":"Practica_GITII/#ejercicio-1_2","title":"Ejercicio 1","text":"<p>Eliminar la \u00faltima l\u00ednea del fichero indice.txt y guardarlo.</p> <p>Comprobar el estado del repositorio.</p> <p>Deshacer los cambios realizados en el fichero indice.txt para volver a la versi\u00f3n anterior del fichero.</p> <p>Volver a comprobar el estado del repositorio.</p> <p></p>"},{"location":"Practica_GITII/#ejercicio-2_2","title":"Ejercicio 2","text":"<p>Eliminar la \u00faltima l\u00ednea del fichero indice.txt y guardarlo.</p> <p>A\u00f1adir los cambios a la zona de intercambio temporal.</p> <p>Comprobar de nuevo el estado del repositorio.</p> <p>Quitar los cambios de la zona de intercambio temporal, pero mantenerlos en el directorio de trabajo.</p> <p>Comprobar de nuevo el estado del repositorio.</p> <p>Deshacer los cambios realizados en el fichero indice.txt para volver a la versi\u00f3n anterior del fichero.</p> <p>Volver a comprobar el estado del repositorio.</p> <p></p>"},{"location":"Practica_GITII/#ejercicio-3_2","title":"Ejercicio 3","text":"<p>Eliminar la \u00faltima l\u00ednea del fichero indice.txt y guardarlo.</p> <p>Eliminar el fichero capitulos/capitulo3.txt.</p> <p>A\u00f1adir un fichero nuevo capitulos/capitulo4.txt vac\u00edo.</p> <p>A\u00f1adir los cambios a la zona de intercambio temporal.</p> <p>Comprobar de nuevo el estado del repositorio.</p> <p>Quitar los cambios de la zona de intercambio temporal, pero mantenerlos en el directorio de trabajo.</p> <p>Comprobar de nuevo el estado del repositorio.</p> <p>Deshacer los cambios realizados para volver a la versi\u00f3n del repositorio.</p> <p>Volver a comprobar el estado del repositorio.</p> <p></p> <p></p>"},{"location":"Practica_GITII/#ejercicio-4_2","title":"Ejercicio 4","text":"<p>Eliminar la \u00faltima l\u00ednea del fichero indice.txt y guardarlo.</p> <p>Eliminar el fichero capitulos/capitulo3.txt.</p> <p>A\u00f1adir los cambios a la zona de intercambio temporal y hacer un commit con el mensaje \u201cBorrado accidental.\u201d</p> <p>Comprobar el historial del repositorio.</p> <p>Deshacer el \u00faltimo commit pero mantener los cambios anteriores en el directorio de trabajo y la zona de intercambio temporal.</p> <p>Comprobar el historial y el estado del repositorio.</p> <p>Volver a hacer el commit con el mismo mensaje de antes.</p> <p>Deshacer el \u00faltimo commit y los cambios anteriores del directorio de trabajo volviendo a la versi\u00f3n anterior del repositorio.</p> <p>Comprobar de nuevo el historial y el estado del repositorio.</p> <p></p> <p></p>"},{"location":"Practica_GITII/#ejercicios-de-gestion-de-ramas","title":"Ejercicios de gesti\u00f3n de ramas","text":""},{"location":"Practica_GITII/#ejercicio-1_3","title":"Ejercicio 1","text":"<p>Crear una nueva rama bibliografia y mostrar las ramas del repositorio.</p> <p></p>"},{"location":"Practica_GITII/#ejercicio-2_3","title":"Ejercicio 2","text":"<p>Crear el fichero capitulos/capitulo4.txt y a\u00f1adir el texto siguiente</p> <p>En este cap\u00edtulo veremos c\u00f3mo usar GitHub para alojar repositorios en remoto.</p> <p>A\u00f1adir los cambios a la zona de intercambio temporal.</p> <p>Hacer un commit con el mensaje \u201cA\u00f1adido cap\u00edtulo 4.\u201d</p> <p>Mostrar la historia del repositorio incluyendo todas las ramas.</p> <p></p>"},{"location":"Practica_GITII/#ejercicio-3_3","title":"Ejercicio 3","text":"<p>Cambiar a la rama bibliografia.</p> <p>Crear el fichero bibliografia.txt y a\u00f1adir la siguiente referencia</p> <p>Chacon, S. and Straub, B. Pro Git. Apress.</p> <p>A\u00f1adir los cambios a la zona de intercambio temporal.</p> <p>Hacer un commit con el mensaje \u201cA\u00f1adida primera referencia bibliogr\u00e1fica.\u201d</p> <p>Mostrar la historia del repositorio incluyendo todas las ramas.</p> <p></p>"},{"location":"Practica_GITII/#ejercicio-4_3","title":"Ejercicio 4","text":"<p>Fusionar la rama bibliografia con la rama master.</p> <p>Mostrar la historia del repositorio incluyendo todas las ramas.</p> <p>Eliminar la rama bibliografia.</p> <p>Mostrar de nuevo la historia del repositorio incluyendo todas las ramas.</p> <p></p> <p></p>"},{"location":"Practica_GITII/#ejercicio-5_1","title":"Ejercicio 5","text":"<p>Crear la rama bibliografia.</p> <p>Cambiar a la rama bibliografia.</p> <p>Cambiar el fichero bibliografia.txt para que contenga las siguientes referencias:</p> <p>Scott Chacon and Ben Straub. Pro Git. Apress. Ryan Hodson. Ry\u2019s Git Tutorial. Smashwords (2014) A\u00f1adir los cambios a la zona de intercambio temporal y hacer un commit con el mensaje \u201cA\u00f1adida nueva referencia bibliogr\u00e1fica.\u201d</p> <p>Cambiar a la rama master.</p> <p>Cambiar el fichero bibliografia.txt para que contenga las siguientes referencias:</p> <p>Chacon, S. and Straub, B. Pro Git. Apress. Loeliger, J. and McCullough, M. Version control with Git. O\u2019Reilly. A\u00f1adir los cambios a la zona de intercambio temporal y hacer un commit con el mensaje \u201cA\u00f1adida nueva referencia bibliogr\u00e1fica.\u201d</p> <p>Fusionar la rama bibliografia con la rama master.</p> <p>Resolver el conflicto dejando el fichero bibliografia.txt con las referencias:</p> <p>Chacon, S. and Straub, B. Pro Git. Apress. Loeliger, J. and McCullough, M. Version control with Git. O\u2019Reilly. Hodson, R. Ry\u2019s Git Tutorial. Smashwords (2014) A\u00f1adir los cambios a la zona de intercambio temporal y hacer un commit con el mensaje \u201cResuelto conflicto de bibliograf\u00eda.\u201d</p> <p>Mostrar la historia del repositorio incluyendo todas las ramas.</p> <p></p> <p></p> <p></p>"},{"location":"Practica_GITII/#ejercicios-de-repositorios-remotos","title":"Ejercicios de repositorios remotos","text":""},{"location":"Practica_GITII/#ejercicio-1_4","title":"Ejercicio 1","text":"<p>Crear un nuevo repositorio p\u00fablico en GitHub con el nombre libro-git.</p> <p>A\u00f1adirlo al repositorio local del libro.</p> <p>Mostrar todos los repositorios remotos configurados.</p> <p></p> <p></p>"},{"location":"Practica_GITII/#ejercicio-2_4","title":"Ejercicio 2","text":"<p>A\u00f1adir los cambios del repositorio local al repositorio remoto de GitHub.</p> <p>Acceder a GitHub y comprobar que se han subido los cambios mostrando el historial de versiones.</p> <p></p> <p></p> <p></p>"},{"location":"Practica_GITII/#ejercicio-3_4","title":"Ejercicio 3","text":"<p>Colaborar en el repositorio remoto libro-git de otro usuario.</p> <p>Clonar su repositorio libro-git.</p> <p>A\u00f1adir el fichero autores.txt que contenga el nombre del usuario y su correo electr\u00f3nico.</p> <p>A\u00f1adir los cambios a la zona de intercambio temporal.</p> <p>Hacer un commit con el mensaje \u201cA\u00f1adido autor.\u201d</p> <p>Subir los cambios al repositorio remoto.</p> <p></p> <p></p>"},{"location":"Practica_GITII/#ejercicio-4_4","title":"Ejercicio 4","text":"<p>Hacer una bifurcaci\u00f3n del repositorio remoto asalber/libro-git en GitHub.</p> <p>Clonar el repositorio creado en la cuenta de GitHub del usuario.</p> <p>Crear una nueva rama autoria y activarla.</p> <p>A\u00f1adir el nombre del usuario y su correo al fichero autores.txt.</p> <p>A\u00f1adir los cambios a la zona de intercambio temporal.</p> <p>Hacer un commit con el mensaje \u201cA\u00f1adido nuevo autor.\u201d</p> <p>Subir los cambios de la rama autoria al repositorio remoto en GitHub.</p> <p>Hacer un Pull Request de los cambios en la rama autoria.</p> <p></p> <p></p> <p></p> <p></p>"},{"location":"practica2_1/","title":"Pr\u00e1ctica 2.1 - Despliegue de un Sitio Web con Nginx","text":""},{"location":"practica2_1/#introduccion","title":"Introducci\u00f3n","text":"<p>En esta pr\u00e1ctica, desplegamos un servidor web utilizando Nginx en un sistema basado en Debian/Ubuntu.  A trav\u00e9s de la instalaci\u00f3n y configuraci\u00f3n b\u00e1sica, conseguimos servir un sitio web est\u00e1tico de ejemplo. </p>"},{"location":"practica2_1/#paso-1-instalacion-de-nginx","title":"Paso 1: Instalaci\u00f3n de Nginx","text":"<p>Primero, actualizamos los paquetes e instalamos Nginx:</p> <ul> <li>sudo apt update</li> <li>sudo apt install nginx</li> </ul> <p></p> <p>Verificamos que Nginx est\u00e9 corriendo con el siguiente comando:</p> <ul> <li>systemctl status nginx</li> </ul> <p></p> <p>Si todo est\u00e1 bien, debe mostrar que el servicio est\u00e1 activo.</p>"},{"location":"practica2_1/#paso-2-creacion-de-las-carpeta-del-sitio-web","title":"Paso 2: Creaci\u00f3n de las carpeta del sitio web","text":"<p>Ahora necesitamos crear un directorio donde se alojar\u00e1 nuestro sitio web. Normalmente, este se encuentra en /var/www. Usaremos mkdir para crear una nueva carpeta. </p> <ul> <li>sudo mkdir -p /var/www/nombre_web/html</li> </ul> <p></p> <p>Ah\u00ed, dentro de esa carpeta html, deb\u00e9mos clonar el siguiente repositorio:</p> <p></p> <p>https://github.com/cloudacademy/static-website-example</p> <p>Es importante cambiar la propiedad de este directorio a www-data, que es el usuario bajo el cual Nginx se ejecuta. Hacemos esto con:</p> <ul> <li>sudo chown -R www-data:www-data /var/www/nombre_web/html</li> </ul> <p>Luego, ajustamos los permisos para que Nginx tenga acceso adecuado:</p> <ul> <li>sudo chmod -R 755 /var/www/nombre_web</li> </ul> <p></p> <p>Para comprobar que el servidor est\u00e1 funcionando correctamente:</p> <p>miramos la ip de la maquina con el siguiente comando</p> <ul> <li>hostname -I</li> </ul> <p></p> <p>Despues buscamos en internet la ip de la maquina y deber\u00eda de salir algo tal que as\u00ed</p> <p></p> <ul> <li>http://IP-maq-virtual</li> </ul> <p>Lo que muestra que todo est\u00e1 correcto.</p>"},{"location":"practica2_1/#paso-3-configuracion-de-servidor-web-nginx","title":"Paso 3: Configuraci\u00f3n de servidor web NGINX","text":"<p>El siguiente paso es crear un archivo de configuraci\u00f3n para nuestro sitio. Nos dirigimos a la carpeta de configuraci\u00f3n de Nginx:</p> <ul> <li>sudo nano /etc/nginx/sites-available/nombre_web</li> </ul> <p></p> <p>Para encontrar la ruta deberemos usar el siguiente comando:</p> <p></p> <ul> <li>sudo find / -name index.html</li> </ul> <p>Dentro de este archivo, a\u00f1adimos lo siguiente:</p> <p></p> <p>Despu\u00e9s de guardar el archivo, necesitamos habilitar este nuevo sitio creando un enlace simb\u00f3lico en la carpeta sites-enabled:</p> <p></p> <ul> <li>sudo ln -s /etc/nginx/sites-available/mi_sitio /etc/nginx/sites-enabled/</li> </ul> <p>Para que los cambios surtan efecto, reiniciamos Nginx con:</p> <p></p> <ul> <li>sudo systemctl restart nginx</li> </ul>"},{"location":"practica2_1/#paso-4-comprobaciones","title":"Paso 4: Comprobaciones","text":"<p>Primero a\u00f1adimos la ip de la maquina virtual en la siguiente ruta</p> <ul> <li>en Linux: /etc/hosts</li> </ul> <p></p> <p>El siguiente paso ser\u00e1 a\u00f1adir la ip nuestro pc en la que estamos usando la maquina para poder conectarnos posteriormente</p> <ul> <li>en Windows: C:\\Windows\\System32\\drivers\\etc\\hosts</li> </ul> <p></p> <p>Ahora pasaremos a la configuraci\u00f3n del servidor SFTPD. En primer lugar, lo instalaremos desde los repositorios:</p> <ul> <li>sudo apt-get update</li> <li>sudo apt-get install vsftpd</li> </ul> <p>El comando sudo apt-get install vsftpd instala el paquete vsftpd, que es un servidor FTP ligero y seguro. </p> <p>Despues creamos una carpeta en nuestro home en Debian: - mkdir /home/mario_web/ftp</p> <p></p> <p>En la configuraci\u00f3n de vsftpd indicaremos que este ser\u00e1 el directorio al cual vsftpd se cambia despu\u00e9s de conectarse el usuario.</p> <p>El siguiente paso ser\u00e1 crear los certificados de seguridad necesarios para aportar la capa de cifrado a nuestra conexi\u00f3n.</p> <p></p> <p>Usaremos el siguiente comando para la configuraci\u00f3n de vsftpd.</p> <ul> <li>sudo nano /etc/vsftpd.conf</li> </ul> <p></p> <p>Dentro de la configuraci\u00f3n de vsftpd a\u00f1adiremos lo siguiente que se muestra en la imagen. Esta configuraci\u00f3n asegura que las conexiones FTP sean seguras usando FTPS (FTP sobre SSL/TLS). Esto cifra tanto la autenticaci\u00f3n como la transferencia de archivos, protegiendo los datos de posibles intercepciones.</p> <p></p> <p>Ya hemos terminado con la configuraci\u00f3n.  Ahora podremos acceder a nuestro servidor mediante un cliente FTP descargando filezilla client en el cliente</p> <p> Entramos en filezilla e introducimos los datos necesarios para conectarnos a nuestro servidor FTP en Debian</p> <ul> <li>IP de la maquina servidor</li> <li>Nombre</li> <li>Contrase\u00f1a</li> <li>Puerto, que ser\u00e1 el 21</li> </ul> <p>Como muestro en la imagen ya conectado a la maquina principal he pasado un archivo txt para combrobar que funciona correctamente.</p> <p></p> <p>Por ultimo modificaremos la configuraci\u00f3n del servidor web con Nginx, para poder mostrar la pagina final.</p> <p>Este archivo configura mi servidor web que sirve contenido est\u00e1tico desde /var/www/mario_web y asegura la conexi\u00f3n usando HTTPS. El puerto 80 redirige autom\u00e1ticamente al 443 (HTTPS) para garantizar conexiones seguras.</p> <p></p> <p>Para comprobar que la configuraci\u00f3n est\u00e1 correctamente y nos muestra la p\u00e1gina, escribiremos en internet \"https://www.mario_web.com/\"\"</p> <p>Nos saldra un mensaje de advertencia, para poder visualizar la pagina pincharemos en \"configuraci\u00f3n avanzada\" y despues en \"Acceder a www.mario_web.com (sitio no seguro)\"\"</p> <p></p> <p>Finalmente visualizar\u00e1 la pagina final mostrando que todo el proceso realizado est\u00e1 correcto</p> <p></p>"},{"location":"practica2_2/","title":"Pr\u00e1ctica 2.2 - Autenticaci\u00f3n en Nginx","text":""},{"location":"practica2_2/#introduccion","title":"Introducci\u00f3n","text":"<p>La pr\u00e1ctica 2.2 trata sobre c\u00f3mo configurar autenticaci\u00f3n b\u00e1sica en un servidor Nginx. El objetivo es proteger el acceso a ciertos recursos web usando usuarios y contrase\u00f1as. Se trabaja con la creaci\u00f3n del archivo .htpasswd para almacenar credenciales cifradas, se configuran las directivas de autenticaci\u00f3n en Nginx, y se realizan pruebas para asegurar que la autenticaci\u00f3n funcione.  Tambi\u00e9n se explora c\u00f3mo combinar autenticaci\u00f3n con restricciones por IP.  La pr\u00e1ctica incluye tareas como modificar la configuraci\u00f3n y analizar los logs de acceso.</p> <p>Paquetes necesarios:</p> <p>En primer lugar debemos comprobar si el paquete est\u00e1 instalado con el siguiente comando:</p> <ul> <li>dpkg -l | grep openssl</li> </ul> <p></p> <p>Y si no lo estuviera, instalarlo.</p>"},{"location":"practica2_2/#creacion-de-usuarios-y-contrasenas-para-el-acceso-web","title":"Creaci\u00f3n de usuarios y contrase\u00f1as para el acceso web","text":"<p>Crearemos un archivo oculto llamado \u201c.htpasswd\u201d en el directorio de configuraci\u00f3n /etc/nginx donde guardar nuestros usuarios y contrase\u00f1as:</p> <p></p> <p>Ahora crearemos un pasword cifrado para el usuario:</p> <p>Nos pedir\u00e1 la contrase\u00f1a que queramos y verificarla.</p> <p></p> <p>Crearemos otro usuario con mis apellidos y con el siguiente comando se mostrar\u00e1n las contrase\u00f1as cifradas</p> <ul> <li>cat /etc/nginx/.htpasswd</li> </ul> <p></p>"},{"location":"practica2_2/#comprobacion-1","title":"COMPROBACI\u00d3N 1","text":"<p>Al entrar en nuestra web nos pedir\u00e1 el usuario y contrase\u00f1a.</p> <p></p>"},{"location":"practica2_2/#comprobacion-2","title":"COMPROBACI\u00d3N 2","text":"<p>En caso de no poder acceder mostrar\u00e1 los siguiente</p> <p></p>"},{"location":"practica2_2/#tarea-1","title":"TAREA 1","text":"<p>Aqu\u00ed se muestra 3 intentos fallidos de autenticaci\u00f3n usando el siguiente comando:</p> <ul> <li>sudo nano /var/log/nginx/error.log</li> </ul> <p></p>"},{"location":"practica2_2/#tarea-2","title":"TAREA 2","text":"<p>Borramos las dos l\u00edneas que hacen referencia a la autenticaci\u00f3n b\u00e1sica en el location del directorio ra\u00edz.</p> <p></p> <p>Despues, a\u00f1adimos un nuevo location debajo con la autenticaci\u00f3n b\u00e1sica para el archivo/secci\u00f3n contact.html \u00fanicamente.</p> <p></p> <p>Al haber hecho esto solo podremos acceder al apartado de \"contact\"</p> <p></p>"},{"location":"practica2_2/#combinacion-de-la-autenticacion-basica-con-la-restriccion-de-acceso-por-ip","title":"Combinaci\u00f3n de la autenticaci\u00f3n b\u00e1sica con la restricci\u00f3n de acceso por IP","text":""},{"location":"practica2_2/#tarea-1_1","title":"Tarea 1","text":"<p>Entraremos en el archivo de configuraci\u00f3n y a\u00f1adiremos el deny junto a la direcci\u00f3n IP </p> <p></p> <p>Cuando configuramos Nginx con autenticaci\u00f3n b\u00e1sica, cualquier intento fallido de acceder con credenciales incorrectas se registra en los logs. En este caso, primero intentaremos acceder con un usuario no v\u00e1lido y luego con uno correcto.</p> <p>Nos mostrar\u00e1 el siguiente error:</p> <p></p> <p>Para ver los usuarios que han accedido correctamente a la pagina ser\u00eda usando el siguiente comando:</p> <ul> <li>sudo cat /var/log/nginx/access.log</li> </ul> <p></p>"},{"location":"practica2_2/#tarea-2_1","title":"Tarea 2","text":"<p>Para esta tarea haremos lo mismo pero a\u00f1adiendo lo siguiente:</p> <p></p> <p>Ahora si nos dejar\u00e1 acceder a la p\u00e1gina ya que no se deniega la ip.</p> <p></p>"},{"location":"practica2_2/#cuestiones-finales","title":"Cuestiones Finales","text":""},{"location":"practica2_2/#cuestion-1","title":"Cuestion 1","text":"<p>Si yo tengo la IP 172.1.10.15 y estoy intentando acceder al directorio /web_muy_guay con un usuario y contrase\u00f1a incorrectos, no podr\u00e9 acceder. Esto se debe a que en la configuraci\u00f3n del bloque location se usa la directiva satisfy all, lo que significa que tanto la autenticaci\u00f3n b\u00e1sica como la restricci\u00f3n por IP deben cumplirse. Aunque mi IP est\u00e1 permitida (allow 172.1.10.15), al equivocarme con las credenciales, no cumplo con la autenticaci\u00f3n b\u00e1sica, y por lo tanto el acceso ser\u00e1 denegado.</p>"},{"location":"practica2_2/#cuestion-2","title":"Cuestion 2","text":"<p>Si ahora intento acceder al directorio /web_muy_guay con mi IP (172.1.10.15) e ingreso correctamente el usuario y contrase\u00f1a, s\u00ed podr\u00e9 acceder. En este caso, la directiva sigue siendo satisfy all, por lo que ambas condiciones (IP permitida y autenticaci\u00f3n exitosa) deben cumplirse. Mi IP est\u00e1 permitida y al haber introducido correctamente las credenciales, cumplo con los dos requisitos, por lo que podr\u00e9 entrar sin problemas.</p>"},{"location":"practica2_2/#cuestion-3","title":"Cuestion 3","text":"<p>En este caso, aunque introduzca correctamente el usuario y la contrase\u00f1a, no podr\u00e9 acceder. La raz\u00f3n es que la directiva satisfy any permite que se cumpla solo una de las condiciones (autenticaci\u00f3n o IP permitida) para permitir el acceso. Sin embargo, en la configuraci\u00f3n se ha a\u00f1adido una regla que deniega el acceso a mi IP (deny 172.1.10.15), lo que bloquea mi acceso incluso si la autenticaci\u00f3n es exitosa. La regla de denegaci\u00f3n de la IP tiene prioridad en este caso, as\u00ed que el acceso es bloqueado.</p>"},{"location":"practica2_2/#cuestion-4","title":"Cuestion 4","text":"<p>Para proteger el directorio /Proyectos de mi web, lo que har\u00eda ser\u00eda a\u00f1adir un bloque location espec\u00edfico para ese directorio, con autenticaci\u00f3n b\u00e1sica. La configuraci\u00f3n quedar\u00eda algo as\u00ed:</p> <p>nginx server {     listen 80;     listen [::]:80;     root /var/www/freewebsitetemplates.com/preview/space-science;     index index.html index.htm index.nginx-debian.html;     server_name freewebsitetemplates.com www.freewebsitetemplates.com;</p> <pre><code>location / {\n    try_files $uri $uri/ =404;\n}\n\nlocation /Proyectos {\n    auth_basic \"\u00c1rea restringida - Proyectos\";\n    auth_basic_user_file /etc/nginx/conf.d/htpasswd_proyectos;\n}\n</code></pre> <p>}</p> <p>Aqu\u00ed lo que hago es configurar el acceso restringido para el directorio /Proyectos usando la autenticaci\u00f3n b\u00e1sica con un archivo de contrase\u00f1as (htpasswd). De esta forma, solo quienes tengan el usuario y la contrase\u00f1a correcta podr\u00e1n acceder al directorio.</p>"},{"location":"practica2_3/","title":"Pr\u00e1ctica 2.3 - Proxy inverso con Nginx","text":""},{"location":"practica2_3/#clonar-la-maquina-virtual","title":"Clonar la m\u00e1quina virtual","text":"<p>Lo primero que tenemos que hacer es tomar la m\u00e1quina virtual ya configurada en las pr\u00e1cticas anteriores y la clonamos.  Tendremos ahora dos m\u00e1quinas: una que actuar\u00e1 como servidor web y la otra como proxy inverso.</p> <p></p> <p>Al clonar, es importante generar una nueva direcci\u00f3n MAC para que ambas m\u00e1quinas tengan direcciones IP diferentes y no haya conflictos en la red.</p> <p></p>"},{"location":"practica2_3/#nginx-servidor-web","title":"Nginx servidor web","text":"<p>Primero modificamos el archivo de configuraci\u00f3n de Nginx en /etc/nginx/sites-available/webserver (o creamos uno nuevo). Dentro, cambiamos la l\u00ednea de listen 80 a listen 8080.</p> <p></p> <p>En el servidor web, cambiamos el puerto de escucha en Nginx. En vez del puerto 80, lo configuramos para que escuche en el puerto 8080.</p> <p></p> <p>Luego, eliminamos el enlace simb\u00f3lico actual en /etc/nginx/sites-enabled/ y creamos uno nuevo apuntando al archivo que acabamos de modificar.</p> <p></p> <p>Finalmente, reiniciamos Nginx para aplicar los cambios con sudo systemctl restart nginx</p> <p></p>"},{"location":"practica2_3/#configurar-el-proxy-inverso","title":"Configurar el proxy inverso","text":"<p>Primero debemos modificar el arhivo de configuracion de la maquina servidorweb en el archivo host de la maquina proxy. </p> <p></p> <p>En la m\u00e1quina que funcionar\u00e1 como proxy inverso, creamos un archivo de configuraci\u00f3n en /etc/nginx/sites-available/ejemplo-proxy.</p> <p></p> <p>Aqu\u00ed, a\u00f1adimos una directiva proxy_pass que redirija las solicitudes al servidor web, usando su direcci\u00f3n IP y el puerto 8080 que configuramos antes. Esto har\u00e1 que cualquier solicitud que llegue al proxy en el puerto 80 sea redirigida a nuestro servidor web.</p> <p></p> <p>Habilitamos el sitio creando un enlace simb\u00f3lico en /etc/nginx/sites-enabled/ejemplo-proxy y Reiniciamos el servicio Nginx.</p> <p></p> <p>A continuaci\u00f3n se proceder\u00e1 a modificar el archivo hosts de la maquina anfitriona para que la ip coincida con la de la maquina de webserver</p> <p></p>"},{"location":"practica2_3/#realizar-pruebas","title":"Realizar pruebas","text":"<p>Para comprobar que todo funciona, abrimos el navegador e ingresamos la IP del proxy (o el nombre de dominio, si lo tenemos configurado). Las solicitudes que llegan al proxy deben ser redirigidas autom\u00e1ticamente al servidor web.</p> <p></p> <p>Si todo est\u00e1 bien configurado, al hacer la solicitud deber\u00edamos ver el contenido servido desde el servidor web</p>"},{"location":"practica2_3/#cabeceras","title":"Cabeceras","text":"<p>Para a\u00f1adir cabeceras, en el archivo de configuraci\u00f3n del sitio web debemos a\u00f1adir dentro del bloque location / { \u2026 } debemos a\u00f1adir lo siguiente: - add_header Host nombre_del_host;</p> <p></p> <p>Aqu\u00ed se muestra el resultado final</p> <p></p> <p></p>"},{"location":"practica2_4/","title":"Pr\u00e1ctica 2.4 - Proxy inverso con balanceo de carga con Nxginx","text":""},{"location":"practica2_4/#introduccion","title":"Introducci\u00f3n","text":"<p>Esta pr\u00e1ctica introduce el concepto de balanceo de carga mediante un proxy inverso con Nginx. Aqu\u00ed veremos c\u00f3mo distribuir tr\u00e1fico entre varios servidores, lo que mejora la disponibilidad y eficiencia del servicio web. El objetivo es configurar un proxy inverso que reparta las solicitudes entre dos servidores diferentes, de manera que se garantice el acceso incluso si uno de ellos falla. Adem\u00e1s, se explorar\u00e1n varios m\u00e9todos de balanceo para entender cu\u00e1l es m\u00e1s efectivo en distintas situaciones.</p>"},{"location":"practica2_4/#configuracion-de-los-servidores-web","title":"CONFIGURACI\u00d3N DE LOS SERVIDORES WEB","text":"<ul> <li>Webserver1:</li> </ul> <p>Desactivamos los sitios web de las practicas anteriores</p> <p></p> <p>Lo Primero que haremos ser\u00e1 cambiarle el nombre al archivo de conf</p> <p></p> <p>Despues le quitaremos el link simbolico anterior lo volvemos a crear y reiniciamos el servicio de nginx.</p> <p></p> <p>Creamos el archivo de configuracion para webserver1 en la carpeta /etc/nginx/sites-available y enlazamos a sites-enabled</p> <pre><code>server {\n    listen 8080;\n    server_name webserver1;\n\n    root /var/www/webserver1/html;\n    index index.html;\n\n    add_header Serv_Web1 \"tu_nombre\";\n\n    location / {\n        try_files $uri $uri/ =404;\n    }\n}\n</code></pre> <p>Despu\u00e9s de poner esto en el archivo /etc/nginx/sites-available/webserver1 enlazamos a sites-enables con el siguiente comando.</p> <p></p> <p></p> <p>Lo siguiente ser\u00e1 Crear el directorio /var/www/webserver1/html y creamos en \u00e9l, el archivo index.html</p> <pre><code>&lt;html lang=\"es\"&gt;\n&lt;head&gt;\n    &lt;title&gt;Prueba de balanceo de carga con Nginx&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;h2&gt;Este es el servidor web 1&lt;/h2&gt;\n    &lt;p&gt;Comprueba el balanceo de carga con Nginx recargando esta p\u00e1gina&lt;/p&gt;&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre> <p></p> <p>reiniciamos y comprobamos el servidor nginx</p> <p></p> <p>Una vez hecho todo esto podemos pasar a clonar la maquina virtual.</p> <ul> <li>Webserver2: Aq\u00fai solamente habr\u00e1 que repetir el proceso que ya hemos hecho pero cambiando webserver1 por Webserver2.</li> </ul> <p>Modificamos configuraci\u00f3n</p> <p></p> <p>modificamos index.html</p> <p></p> <p>por ultimo reiniciamos y comprobamos el servidor nginx</p> <p></p>"},{"location":"practica2_4/#configuracion-del-proxy-inverso","title":"CONFIGURACI\u00d3N DEL PROXY INVERSO","text":"<p>Entramos en la m\u00e1quina que configuramos el proxy inverso en la pr\u00e1ctica anterior</p>"},{"location":"practica2_4/#balanceo-de-carga","title":"balanceo de carga","text":"<p>Primero, creamos el archivo en /etc/nginx/sites-available/ con el nombre balanceo:</p> <ul> <li>sudo nano /etc/nginx/sites-available/balanceo</li> </ul> <p>Configurarmos el contenido: Dentro de este archivo, definimos un bloque upstream y especificamos los servidores para el balanceo de carga.</p> <p>Dentro estan incluidas las 2 ip de cada maquina.</p> <p></p> <p>Crea un enlace simb\u00f3lico para habilitar la configuraci\u00f3n y reiniciamos nginx.</p> <p></p> <p>Hasta aqu\u00ed todo bien</p> <p></p>"},{"location":"practica2_4/#configuracion-de-etchosts","title":"CONFIGURACI\u00d3N DE /ETC/HOSTS","text":"<ul> <li>Webserver1</li> </ul> <ul> <li>Webserver2</li> </ul> <ul> <li>Proxy inverso</li> </ul>"},{"location":"practica2_4/#resultado","title":"RESULTADO","text":"<p>Al entrar en http://balanceo nos mostrara las pagina que muestra. </p> <p></p>"},{"location":"practica2_4/#cuestiones-finales","title":"Cuestiones finales","text":""},{"location":"practica2_4/#cuestion-1","title":"Cuesti\u00f3n 1","text":"<p>M\u00e9todos de balanceo de carga en Nginx:</p> <p>Round Robin: Env\u00eda solicitudes a los servidores en un orden c\u00edclico. Least Connections: Dirige las solicitudes al servidor con la menor cantidad de conexiones activas. IP Hash: Utiliza la direcci\u00f3n IP del cliente para dirigir las solicitudes, asegurando que un cliente espec\u00edfico siempre acceda al mismo servidor.</p>"},{"location":"practica2_4/#cuestion-2","title":"Cuesti\u00f3n 2","text":"<p>A\u00f1adir servidores al balanceo de carga:</p> <p>Actualizar el bloque upstream en la configuraci\u00f3n de Nginx para incluir las nuevas direcciones IP de los servidores. Ejemplo:</p> <p>nginx Copiar c\u00f3digo upstream backend_hosts {     server 192.168.18.239:8080;     server 192.168.18.243:8080;     server 192.168.18.250:8080;  # nuevo servidor     server 192.168.18.251:8080;  # nuevo servidor } Reiniciar Nginx con sudo systemctl restart nginx.</p>"},{"location":"practica2_4/#cuestion-3","title":"Cuesti\u00f3n 3","text":"<p>Pasos para implementar balanceo de carga:</p> <p>Preparar los servidores web asegur\u00e1ndose de que est\u00e9n configurados y escuchando en el puerto adecuado (ej. 8080). Configurar el proxy inverso en Nginx, creando un bloque upstream y un servidor que escuche en el puerto 80. (Opcional) Modificar el archivo /etc/hosts para facilitar el acceso al balanceador por nombre. Reiniciar Nginx. Probar la configuraci\u00f3n accediendo a la URL del balanceador.</p>"},{"location":"practica2_5/","title":"Pr\u00e1ctica 2.5 - Proxy inverso y balanceo de carga con SSL en NGINX","text":""},{"location":"practica2_5/#creacion-de-certificado-autofirmado","title":"Creaci\u00f3n de certificado autofirmado","text":"<p>Para esta practica vamos a necesitar un certificado SSL autofirmado</p> <p>Primero, dentro del directorio de NGINX (/etc/nginx/), creamos una carpeta llamada ssl para guardar los archivos SSL. Luego, con el comando openssl, generamos un certificado y una clave privada. Esto es un certificado \u201cautofirmado\u201d, o sea, no es de una entidad oficial. Lo usamos solo para pruebas.</p> <p> </p>"},{"location":"practica2_5/#configuracion-ssl-en-el-proxy-inverso","title":"Configuraci\u00f3n SSL en el proxy inverso","text":"<p>En el archivo /etc/nginx/sites-available/balanceo, agregamos la configuraci\u00f3n para que NGINX escuche en el puerto 443 (para HTTPS). A\u00f1adimos las rutas al certificado y la clave privada, y definimos los protocolos y cifrados de SSL que permitimos.Esto asegura que el tr\u00e1fico est\u00e9 cifrado.</p> <p></p> <p>reiniciamos el servidor para aplicar los cambios</p> <p></p>"},{"location":"practica2_5/#comprobaciones","title":"Comprobaciones","text":"<p>Probamos accediendo al sitio en HTTPS. Veremos una advertencia del navegador sobre el certificado autofirmado, pero es normal.</p> <p></p> <p>accedemos a la secci\u00f3n de ver certificado, donde se mostrar\u00e1 toda la configuraci\u00f3n y sus claves.</p> <p></p> <p></p> <p></p>"},{"location":"practica2_5/#redireccion-forzosa-a-https","title":"Redirecci\u00f3n forzosa a HTTPS","text":"<p>Para configurar una redirecci\u00f3n forzosa de HTTP a HTTPS en NGINX, agregamos un bloque server que escuche en el puerto 80 y redirija autom\u00e1ticamente a HTTPS:</p> <p>listen 80; indica que este bloque escucha en el puerto HTTP.</p> <p>return 301 https://$host$request_uri; hace una redirecci\u00f3n permanente a HTTPS manteniendo el mismo dominio y URL.</p> <p>Se deber\u00e1 de modificar el archivo de configuraci\u00f3n del proxy-inverso como se muestra en la siguiente imagen.</p> <p></p>"},{"location":"practica2_5/#cuestiones-finales","title":"Cuestiones finales","text":""},{"location":"practica2_5/#cuestion-1","title":"Cuestion 1","text":"<p>Si tienes el error ERR_SSL_PROTOCOL_ERROR, es porque falta un detalle: en la configuraci\u00f3n, donde dice listen 443;, debe estar escrito como listen 443 ssl;. Sin ese ssl, NGINX no sabe que quieres usar SSL en ese puerto, as\u00ed que el sitio no se carga.</p>"},{"location":"practica2_5/#cuestion-2","title":"Cuestion 2","text":"<p>El error ERR_CERT_REVOKED ocurre cuando el certificado SSL ha sido revocado, lo cual puede suceder si el proveedor de certificados lo ha invalidado debido a problemas de seguridad, caducidad o alguna irregularidad detectada.</p> <p>Para solucionarlo:</p> <p>Verificar el estado del certificado: Usar herramientas como SSL Labs para ver el estado del certificado. Renovar el certificado: Si el certificado ha caducado, solicitar una renovaci\u00f3n a la autoridad emisora. Revisar la configuraci\u00f3n de NGINX: Asegurarnos de estar usando el certificado correcto y que est\u00e9 actualizado.</p>"},{"location":"practica3_1/","title":"Pr\u00e1ctica 3.1: Instalaci\u00f3n de Tomcat y Maven para despliegue de aplicaci\u00f3n Java","text":""},{"location":"practica3_1/#instalacion-y-despliegue-tomcat","title":"Instalaci\u00f3n y Despliegue Tomcat","text":"<p>Lo primero que haremos ser\u00e1 Descargar Apache Tomcat 10 y extraerlo en nuestra m\u00e1quina.  Podemos configurarlo para que funcione en el puerto 8080 (predeterminado). Descargamos el JDK con el siguiente comando</p> <p></p> <p>comprobaremos la versi\u00f3n instalada </p> <p></p> <p>Seguiremos con la instalaci\u00f3n de Tomcat con el siguiente comando</p> <p></p> <p>El siguiente paso ser\u00e1 configurar el archivo tomcat-users.xml en la carpeta de Tomcat para crear un usuario con roles de administrador (manager-gui) y de despliegue (manager-script).</p> <ul> <li>sudo nano /etc/tomcat10/tomcat-users.xml</li> </ul> <p></p> <p>Hecho este paso pasaremos a reiniar el servicio de Tomcat con el comando <code>sudo systemctl restart tomcat</code>. Para comprobar que el servicio se ha iniciado correctamente, se ejecutar\u00e1 el comando <code>sudo systemctl status tomcat</code> y debera aparecer algo similar a lo siguiente: Que como se puede comprobar el servicio de tomcat esta activo y correcto.</p> <p></p> <p>Cambie mi nombre a \"manager\" porque me daba errores.</p> <p>Accedemos a la direcci\u00f3n <code>http://localhost:8080/nombre_usuario/html</code> nos solicitar\u00e1 usuario y contrase\u00f1a y nos mostrar\u00e1 lo siguiente:</p> <p></p> <p></p> <p>Ahora pasaremos a desplegar un un archivo .war en Tomcat. El archivo .war de la entrega cotiene errores, por lo que elegir\u00e9 un archivo .war con un proyecto de ejemplo.</p> <p>Desde el siguiente enlace se descargar\u00e1 el proyecto de ejemplo: <code>https://tomcat.apache.org/tomcat-6.0-doc/appdev/sample/</code></p> <p>Selecionamos el archivo war y le damos a desplegar</p> <p></p> <p>Nos mostrar\u00e1 el archivo desplegado</p> <p></p> <p>podremos acceder al archivo</p> <p></p>"},{"location":"practica3_1/#instalacion-y-despliegue-maven","title":"Instalaci\u00f3n y Despliegue Maven","text":"<p>El primer paso ser\u00e1 instalar maven</p> <p> </p> <p>A\u00f1adiermos un nuevo usuario para maven en el archivo <code>tomcat-users.xml</code> para poder usarlo a la hora de desplegar maven</p> <p></p> <p>lo siguiente ser\u00e1 configurar Maven, modificaremos el archivo <code>settings.xml</code> y Deber\u00eda quedar tal que as\u00ed:</p> <p></p> <p>Y se clona el repositorio de ejemplo facilitado para desplegarlo con Maven.</p> <p></p> <p>Por ultimo se editar\u00e1 el archivo <code>pom.xml</code> y la configuraci\u00f3n. Como se muestra:</p> <p></p> <p>Si todo est\u00e1 correcto y ejecutamos el comando <code>mvn tomcat7:deploy</code> deber\u00e1 aparecer algo as\u00ed:</p> <p></p> <p>Si accedemos a la direcci\u00f3n <code>http://localhost:8080/nombre_usuario/</code> nos mostrar\u00e1 correctamente</p> <p></p> <p>podremos acceder al archivo final.</p> <p></p>"},{"location":"practica3_1/#cuestiones","title":"Cuestiones","text":"<p>Soluci\u00f3n:</p> <p>Esto se debe a la facilidad de configuraci\u00f3n y a la presunci\u00f3n de que Tomcat se emplear\u00e1 en entornos seguros y bien gestionados. Sin embargo, en entornos de producci\u00f3n, se aconseja evitar esta pr\u00e1ctica mediante el uso de autenticaci\u00f3n externa.</p>"},{"location":"practica3_2/","title":"Pr\u00e1ctica 3.2: Despliegue de aplicaciones con Node Express","text":""},{"location":"practica3_2/#introduccion","title":"Introducci\u00f3n","text":"<p>En esta pr\u00e1ctica despleguaremos aplicaciones con Node Express.</p> <p>Lo pimero ser\u00e1 parar el servicio de Tomcat para evitar problemas cuando despleguemos la aplicaci\u00f3n.</p> <p></p>"},{"location":"practica3_2/#instalacion-de-nodejs-express-y-test-de-la-primera-aplicacion","title":"Instalaci\u00f3n de Node.js, Express y test de la primera aplicaci\u00f3n","text":"<p>Instalamos node.js y nmp con un solo comando</p> <p></p> <p>Comprobamos que la instalaci\u00f3n se ha realizado correctamente</p> <p></p>"},{"location":"practica3_2/#despliegue-de-una-nueva-aplicacion","title":"Despliegue de una Nueva Aplicaci\u00f3n","text":"<p>Clonaremos el repositorio de una aplicaci\u00f3n de predicci\u00f3n meteorol\u00f3gica a nuestra maquina</p> <p></p> <p>instalaremos las dependencias de la aplicaci\u00f3n dentro de la carpeta</p> <p></p> <p>En esta parte nos saldr\u00e1 un error en la instalaci\u00f3n de las dependencias, <code>sh: 1: nodemon: not found</code>. Por lo que para solucionarlo ejecutaremos este otro comando:</p> <p></p> <p>Una vez hechos los pasos si accedemos a la direcci\u00f3n <code>http://localhost:3000/</code>, mostrar\u00e1 el resultado final:</p> <p></p>"},{"location":"practica3_2/#cuestiones","title":"Cuestiones","text":"<p>\u00bfDonde podemos ver que script se est\u00e1 ejecutando?</p> <p>En el archivo package.json, dentro de la secci\u00f3n \"scripts\".</p> <p>\u00bfQu\u00e9 comando est\u00e1 ejecutando?</p> <p>En este caso, el script start ejecuta el comando <code>node index.js</code></p> <p>Esto significa que npm run start le dice a Node.js que ejecute el archivo index.js.</p>"},{"location":"practica3_4/","title":"Pr\u00e1ctica 3.4: Despliegue de una Aplicaci\u00f3n React en Netlify (PaaS)","text":""},{"location":"practica3_4/#creacion-de-nuestra-aplicacion","title":"Creaci\u00f3n de nuestra aplicaci\u00f3n","text":"<p>Para realizar la practica nos conectaremos por ssh a nuestra maquina.</p> <p></p> <p>Lo primero ser\u00e1 crear una carpeta en el escritorio y dentro de esta, tres archivos: <code>head.html</code>, <code>tail.html</code> y <code>aplicacion.js</code>.</p> <p></p> <p>El archivo <code>head.html</code> contendr\u00e1 lo siguiente:</p> <p></p> <p>El archivo <code>tail.html</code> contendr\u00e1 lo siguiente:</p> <p></p> <p>El archivo <code>aplicacion.js</code> contendr\u00e1 lo siguiente:</p> <p></p> <p>Para inicializar el proyeto usaremos <code>npm init</code> nos pedir\u00e1 algunos datos a rellenar. </p> <p>Despues ejecutaremos la aplicaci\u00f3n usando <code>node aplicacion.js</code>.</p> <p></p> <p>Si accedemos a la direcci\u00f3n <code>http://localhost:8080/</code> desde nuestra maquina nos mostrar\u00e1 lo siguiente:</p> <p></p>"},{"location":"practica3_4/#aplicacion-para-netlify","title":"Aplicaci\u00f3n para Netlify","text":"<p>Para desplegar nuestra aplicaci\u00f3n en Netlify, vamos a clonar el repositorio para esta practica</p> <p></p>"},{"location":"practica3_4/#proceso-de-despliegue-en-netlify","title":"Proceso de Despliegue en Netlify","text":"<p>Se va a desplegar en netlify de dos maneras diferentes.</p> <ul> <li> <p>Despliegue manual desde el CLI de Netlify, es decir, desde el terminal, a partir de un directorio local de nuestra m\u00e1quina.</p> </li> <li> <p>Despliegue desde un c\u00f3digo publicado en uno de nuestros repositorios de Github</p> </li> </ul>"},{"location":"practica3_4/#despliegue-mediante-cli","title":"Despliegue Mediante CLI","text":"<p>En este metodo instalaremos el cliente de Netlify dentro de la carpeta de la aplicaci\u00f3n.</p> <p></p> <p>Para poder loguearnos debemos entrar en netlify, autenticarnos, aceptar la solicitud y crear un token:</p> <p></p> <p></p> <p></p> <p></p> <p>una vez ya hecho el siguiente paso ser\u00e1 loggearnos en la cuenta de Netlify.</p> <p></p> <p>Ahora instalaremos npm en la aplicaci\u00f3n y ya podremos desplegar la aplicaci\u00f3n en Netlify</p> <p></p> <p></p> <p>El siguiente paso ser\u00e1 desplegar netlify, Se crear\u00e1 y configurar\u00e1 un nuevo sitio</p> <p></p> <p></p> <p>Para comprobar que se ha creado correctamente entraremos en la url de la pagina que nos proporciona netlify.</p> <p></p> <p></p>"},{"location":"practica3_4/#despliegue-mediante-conexion-con-github","title":"Despliegue mediante conexi\u00f3n con Github","text":"<p>En primer lugar, vamos a eliminar el site que hemos desplegado antes en Netlify para evitarnos cualquier problema y/o conflicto:</p> <p></p> <p>Tambien tendremos que borrar el directorio que clonamos anteriormente con este comando <code>rm -rf color-shades-generator</code>. </p> <p></p> <p>nos descargaremos los fuentes en formato .zip</p> <p></p> <p>Creamos una carpeta nueva y descomprimimos dentro el zip:</p> <p></p> <p>Ahora crearemos un repositorio en github y subiremos los archivos de la practica.</p> <p></p> <p>a\u00f1adiremos el contenido de la carpeta al repositorio.</p> <p></p> <p></p> <p>Una vez hecho esto el repositorio deberia quedar tal que as\u00ed:</p> <p></p> <p>El siguiente paso ser\u00e1 enlazar nuestra cuenta de GitHub en Netlify.</p> <p></p> <p>despues selecionamos el repositorio de la practica para desplegarlo</p> <p></p> <p>Selecionamos en \"Deploy\"</p> <p></p> <p>Y ya tendr\u00edamos nuestra pagina desplegada correctamente como se muestra:</p> <p></p> <p></p> <p></p> <p>Ahora accederemos a la carpeta public y se modificar\u00e1 el archivo robot.txt, pondremos el nombre en disallow, y se subir\u00e1 al repositorio con su commit.</p> <p></p> <p></p> <p></p> <p>Como podemos ver se muestra en la web: </p> <p></p>"},{"location":"practica3_4/#despliegue-con-vercel","title":"Despliegue con Vercel","text":"<p>para vercel deberemos seguir los mismos pasos como anteriormente.</p> <p>Enlazamos github con vercel y desplegamos la practica</p> <p></p> <p></p> <p>Al pinchar en \"deploy\" nos desplegara el sitio automaticamente como se muestra:</p> <p></p> <p></p> <p></p> <p>Por \u00faltimo volvemos a modificar robot.txt</p> <p></p> <p>Este ser\u00eda el ultimo paso de la practica correctamente.</p>"},{"location":"practica3_5/","title":"Pr\u00e1ctica 3.5 - Despliegue de una aplicaci\u00f3n Flask","text":"<p>Para poder realizar esta practica necesitaremos tener previamente estos paquetes instalados: <code>Nginx</code>, <code>Gunicorn</code> y <code>Pipenv</code>.</p>"},{"location":"practica3_5/#procedimiento-completo-para-el-despliegue","title":"Procedimiento completo para el despliegue","text":"<p>El primer paso ser\u00e1 Actualizar los repositorios de paquetes del sistema e Instalar Python.</p> <p></p> <p>Adem\u00e1s instalaremos el paquete pipenv que se encargar\u00e1 de gestionar los entornos virtuales y comprobamos su versi\u00f3n</p> <p></p> <p></p> <p>Creamos el directorio en el que almacenaremos nuestro proyecto:</p> <p></p> <p>Como lo creamos con <code>sudo</code>, los permisos pertenecen al usuario root del sistema:</p> <p></p> <p>Hay que cambiar los permisos para que pertenezcan a nuestro usuario y pertenezca al grupo www-data.</p> <p></p> <p>Tendremos que Establecer los permisos adecuados para que pueda ser le\u00eddo por todo el mundo</p> <p></p> <p>dentro del directorio creado se crear\u00e1 el archivo oculto <code>.env</code></p> <p></p> <p>que contendr\u00e1 las variables de entorno con el comando</p> <p></p> <p>verificamos los cambios con <code>cat .env</code></p> <p></p> <p>Iniciaremos el entorno virtual y Pipenv cargar\u00e1 las dependencias del archivo .env</p> <p></p> <p>Lo siguiente ser\u00e1 instalar las dependencias necesarias para nuestro proyecto</p> <p></p> <p>Se crear\u00e1n los archivos <code>app.py</code> y <code>wsgi.py</code>  que contendr\u00e1n lo siguiente:</p> <p></p> <p>ahora ejecutaremos nuestra aplicaci\u00f3n a modo de comprobaci\u00f3n con el servidor web integrado de Flask</p> <p>especificamos la direcci\u00f3n 0.0.0.0 para que escuche en todas sus interfaces.</p> <p></p> <p>Ahora accedemos desde nuestro navegador a la direcci\u00f3n proporcionada <code>http://IP-maq-virtual:5000</code> y nos deber\u00eda mostrar ver lo siguiente:</p> <p></p> <p>comprobaremos que Gunicorn funciona correctamente:</p> <p></p> <p>debemos tomar nota de cual es el path o ruta desde la que se ejecuta gunicorn para poder configurar m\u00e1s adelante un servicio del sistema. </p> <p>Con el siguiente comando:</p> <p></p> <p>Por \u00faltimo, salimos del entorno virtual con <code>deactivate</code></p> <p></p> <p>El siguiente paso ser\u00e1 Iniciar Nginx y comprobar que su estado sea activo.</p> <p></p> <p>Se crear\u00e1 un archivo de configuraci\u00f3n para que systemd ejecute Gunicorn como otro servicio mas:</p> <p></p> <p>habilitamos el servicio lo iniciamos y comprobamos que est\u00e1 en funcionamiento:</p> <p></p> <p>Ahora crearemos un archivo de configuraci\u00f3n en Nginx y lo configuraremos de la siguiente manera.</p> <p></p> <p>despues crearemos el enlace simb\u00f3lico para que Nginx pueda acceder a los archivos de la aplicaci\u00f3n:</p> <p></p> <p>Comprobaremos que la configuraci\u00f3n de Nginx es correcta:</p> <p></p> <p>editamos el archivo /etc/hosts de nuestra m\u00e1quina para que asocie la IP de la m\u00e1quina virtual:</p> <p></p> <p>Por ultimo accedemos a nuestro navegador para comprobar que funciona.</p> <p></p>"},{"location":"practica3_5/#ejercicio","title":"Ejercicio","text":"<p>Repetimos todo el proceso con la aplicaci\u00f3n del siguiente repositorio: https://github.com/raul-profesor/Practica-3.5.</p> <p></p> <p>cambiaremos los permisos del directorio y los propietarios:</p> <p></p> <p>Creamos un archivo oculto <code>.env</code>dentro del directorio de nuestra aplicaci\u00f3n con <code>touch .env.</code></p> <p></p> <p>Editamos el archivo como hicimos anteriormente.</p> <p></p> <p>Iniciamos nuestro entorno de la practica.</p> <p></p> <p>intalamos sus dependencias y gunicorn.</p> <p></p> <p>por ultimo creamos el archivo <code>wsgi.py</code> y lo editamos.</p> <p></p> <p>Ejecutaremos la aplicacion y entramos en la ip proporcionada para que nos muestre la pagina en funcionamiento</p> <p></p> <p></p> <p>todo correcto.</p> <p></p> <p>obtendremos el path de Gunicorn para los siguientes pasos y saldremos del entorno virtual.</p> <p></p> <p>Ahora se desplegarla en Nginx.</p> <p>Creamos un archivo para que <code>systemd</code> corra Gunicorn</p> <p></p> <p>tendremos que configurar el sitio web de Nginx</p> <p></p> <p>Se habilitar\u00e1 el servicio y se har\u00e1 el enlace simb\u00f3lico:</p> <p></p> <p></p> <p>Tendremos que comprobar que el servicio est\u00e1 correcto y funciona correctamente</p> <p></p> <p>Por \u00faltimo tendremos que editar el archivo /etc/hosts y a\u00f1adir la IP nuestra m\u00e1quina a nuestro server_name.</p> <p></p> <p>comprobamos que la aplicaci\u00f3n final funciona: </p> <p></p>"},{"location":"practica3_5/#cuestion","title":"Cuestion","text":"<p>Un servidor WSGI (Web Server Gateway Interface) es un intermediario entre un servidor web (como Nginx o Apache) y una aplicaci\u00f3n Python (como Flask o Django). Su funci\u00f3n principal es traducir las solicitudes del servidor web a un formato que la aplicaci\u00f3n Python pueda entender y, luego, devolver la respuesta generada por la aplicaci\u00f3n al servidor web.</p> <p>\u00bfPor qu\u00e9 lo necesitamos? Los servidores web est\u00e1n dise\u00f1ados para manejar conexiones y archivos est\u00e1ticos, pero no pueden ejecutar directamente el c\u00f3digo Python de una aplicaci\u00f3n. El servidor WSGI facilita esa comunicaci\u00f3n y permite que las aplicaciones Python funcionen correctamente en un entorno de producci\u00f3n.</p> <p>Ejemplo: Cuando un usuario visita tu sitio web, el servidor web (Nginx) pasa la solicitud al servidor WSGI (como Gunicorn), que ejecuta la aplicaci\u00f3n Python (como Flask), y luego le devuelve al servidor web la respuesta que ser\u00e1 enviada al navegador.</p> <p>En resumen, un servidor WSGI act\u00faa como puente entre el servidor web y la aplicaci\u00f3n Python, permitiendo que trabajen juntos para manejar solicitudes web.</p>"},{"location":"practica6_1Docker/","title":"Pr\u00e1ctica 6.1 - Dockerizaci\u00f3n del despliegue de una aplicaci\u00f3n Node.js","text":""},{"location":"practica6_1Docker/#despliegue-con-docker","title":"Despliegue con Docker","text":"<p>primero debemos clonar el siguiente repositorio de GitHub y entramos en el directorio del proyecto con:</p> <p></p> <p>Instalamos docker con el siguiente comando para poder seguir con la practica:</p> <p></p> <p>Dentro del directorio del proyecto, creamos y editamos un archivo llamado Dockerfile para definir la imagen que se va a construir. El contenido que puse fue el siguiente:</p> <p> Con el Dockerfile listo, constru\u00edmos la imagen ejecutando: docker build -t librodirecciones .</p> <p>Este comando construye la imagen Docker utilizando el Dockerfile y le asigna el nombre librodirecciones. El punto (.) indica que el contexto de construcci\u00f3n es el directorio actual.</p> <p></p> <p>Para ver si la imagen funcionaba, lanc\u00e9 un contenedor con el siguiente comando</p> <p>mapeo el puerto 3000 del contenedor al puerto 3000 de mi m\u00e1quina, lo que me permite acceder a la app a trav\u00e9s de ese puerto.</p> <p></p> <p>Al hacer esto, me di cuenta de que la aplicaci\u00f3n intentaba conectar con la base de datos en localhost, pero como cada contenedor tiene su propia red, la app no pod\u00eda encontrar la base de datos. Esto me llev\u00f3 a configurar Docker Compose.</p> <p></p>"},{"location":"practica6_1Docker/#docker-compose","title":"Docker Compose","text":"<p>Debemos tener instalado el docker compose como se muestra</p> <p></p> <p>Ahora crearemos un archivo llamado docker-compose.yml en la ra\u00edz del proyecto con el siguiente contenido:</p> <p></p> <p>Servicio postgres: Configura una base de datos PostgreSQL. Se establecen las variables de entorno necesarias, se expone el puerto 5432 y se utiliza un volumen para mantener los datos.</p> <p>Servicio addressbook: Construye la imagen de la aplicaci\u00f3n a partir del Dockerfile. Las variables de entorno (DB_HOST: postgres, etc.) permiten que la app se conecte a la base de datos que se levanta en el contenedor postgres.</p> <p>depends_on: Asegura que el contenedor de PostgreSQL se inicie antes que la aplicaci\u00f3n.</p> <p>Antes de levantar todos los servicios, necesitamos crear las tablas en la base de datos.</p> <p></p> <p></p> <p>Este comando inicia un contenedor temporal del servicio addressbook para ejecutar el script de migraci\u00f3n que crea las tablas necesarias en PostgreSQL.</p> <p>Despu\u00e9s de migrar la base de datos, levantamos todos los contenedores con:</p> <p></p> <p>podemos verlo con el siguiente comando</p> <p></p> <p></p> <p>Utilizamos curl para probar que la API funcionara correctamente</p> <p>A\u00f1ade una persona: curl -X PUT http://localhost:3000/persons -H 'Content-Type: application/json' -d '{\"id\": 1, \"firstName\": \"Ra\u00fal\", \"lastName\": \"Profesor\"}'</p> <p>Listar todas las personas: curl -X GET http://localhost:3000/persons/all -H 'Content-Type: application/json'</p> <p>Buscar una persona por ID: curl -X GET http://localhost:3000/persons/1 -H 'Content-Type: application/json'</p> <p>Eliminar una persona: curl -X DELETE http://localhost:3000/persons/1 -H 'Content-Type: application/json'</p> <p></p>"},{"location":"practica6_2docker/","title":"Pr\u00e1ctica 6.2 - Despliegue de una aplicaci\u00f3n PHP con Nginx y MySQL usando Docker y Docker-Compose","text":""},{"location":"practica6_2docker/#proceso-de-dockerizacion-de-nginxphpmysql","title":"Proceso de dockerizaci\u00f3n de Nginx+PHP+MySQL","text":"<p>primeronos nos conectamos por ssh nuestra maquina virtual</p> <p></p>"},{"location":"practica6_2docker/#1estructura-de-directorios","title":"1.Estructura de Directorios","text":"<p>Creamos una estructura de directorios como la siguiente:</p> <p></p> <p></p>"},{"location":"practica6_2docker/#2creacion-de-un-contenedor-nginx","title":"2.Creaci\u00f3n de un Contenedor Nginx","text":"<p>El siguiente paso ser\u00e1 crear un contenedor Nginx para alojar la aplicacion PHP</p> <p>tendremos que editar el archivo \"docker-compose.yml\"</p> <p></p> <p>Iniciamos el contenedor de Nginx y comprobamos que todo funciona como debe.</p> <p></p> <p>Descargar\u00e1 la \u00faltima versi\u00f3n de la imagen de Nginx, crear\u00e1 un contenedor  y mapear\u00e1 el puerto 80 del contenedor al puerto 8081 del host.</p> <p>Si accedemos a la direcci\u00f3n localhost y su puerto 8081 mostrar\u00e1 lo siguiente:</p> <p></p>"},{"location":"practica6_2docker/#3creacion-de-un-contenedor-php","title":"3.Creaci\u00f3n de un Contenedor PHP","text":"<p>Tendremos que Editar el archivo index.php de la siguiente manera:</p> <p></p> <p>el siguiente paso ser\u00e1 crear el archivo de configuraci\u00f3n default.conf en la carpeta nginx como en lo siguiente:</p> <p></p> <p>tambi\u00e9n se deber\u00e1 modificar el archivo Dockerfile dentro del directorio nginx.</p> <p></p> <p>despues modificamos el archivo docker-compose.yml ( he modificado el puerto porque el 8081 me daba problemas )</p> <p></p> <p>Ahora levantamos los contenedores y comprobamos que todo se queda funcionando</p> <p></p> <p>Si accedemos a la direcci\u00f3n http://localhost:8082 deber\u00e1 mostrar que funciona:</p> <p></p>"},{"location":"practica6_2docker/#4creacion-de-un-contenedor-para-datos","title":"4.Creaci\u00f3n de un Contenedor para Datos","text":"<p>En este apartado se debe crear un contenedor para almacenar datos, deberemos hacerlo modificando el archivo \"docker-compose.yml\" como se indica:</p> <p></p> <p>Comprobamos que funciona</p> <p></p> <p></p>"},{"location":"practica6_2docker/#5creacion-de-un-contenedor-mysql","title":"5.Creaci\u00f3n de un Contenedor MySQL","text":"<p>Lo siguiente ser\u00e1 crear el contenedor MySQL para alojar la base de datos de la aplicaci\u00f3n PHP.</p> <p>Primero modificamos el archivo dockerfile del directorio php:</p> <p></p> <p>Despues modificamos el archivo docker-compose.yml a\u00f1adiendo lo siguiente:</p> <p></p> <p>Tendremos que modificar el archivo index.php de la siguiente manera:</p> <p></p> <p>Ahora comprobaremos que el contenedore de MYSQL funiona correctamente</p> <p></p>"},{"location":"practica6_2docker/#6verificacion-de-conexion-a-la-base-de-datos","title":"6.Verificaci\u00f3n de Conexi\u00f3n a la Base de Datos","text":"<p>Si ahora accedemos a http://localhost:8082, deber\u00edamos obtener la siguiente pantalla:</p> <p></p> <p>Pero si se modificamos el archivo <code>index.php</code> con el siguiente contenido:</p> <pre><code>    $user = 'root';\n    $password = 'secret';\n</code></pre> <p></p> <p>Si se accede a la direcci\u00f3n http://localhost:8082 (Yo lo he hecho en el puerto 8082) deber\u00e1 aparecer lo siguiente:</p> <p></p> <p>Esto significa que todo el proceso se ha realizado correctamente.</p>"},{"location":"practica6_2docker/#7esquema-de-la-aplicacion","title":"7.Esquema de la Aplicaci\u00f3n","text":""},{"location":"practica6_3docker/","title":"Pr\u00e1ctica 6.3 - Despliegue de servidores web con usuarios autenticados mediante LDAP usando Docker y docker-compose","text":""},{"location":"practica6_3docker/#despliegue-con-docker-de-nginx-demonio-de-autenticacion-ldap-openldap","title":"Despliegue con Docker de NGINX + demonio de autenticaci\u00f3n LDAP + OpenLDAP","text":"<p>Nos conecataremos a nuestra maquina mediante ssh para realizar la Pr\u00e1ctica</p> <p></p> <p>Con los siguientes comandos crearemos la siguiente estructura de directorios.</p> <p></p> <p>Una vez tenemos la estructura hecha, dentro del directorio app crearemos un archivo index.html</p> <p></p> <p>Despues creamos el directorio \"conf\" y dentro el archivo \"ldap_nginx.conf\" con su contenido:</p> <p></p> <p>Con esta configuraci\u00f3n le decimos a NGINX que:</p> <p>-Escuche en el puerto 8080.</p> <p>-Redirija todas las peticiones a la ubicaci\u00f3n / hacia /auth-proxy, donde se realiza la autenticaci\u00f3n.</p> <p>-En /auth-proxy se hace proxy al contenedor nginx-ldap (en el puerto 8888) y se configuran las cabeceras para conectarse al servidor LDAP.</p> <p>Ahora crearemos el archivo docker-compose.yml con su ontenido correspondiente:</p> <p></p> <p>Se definen tres servicios:</p> <p>-nginx-ldap: Ejecuta el demonio de autenticaci\u00f3n LDAP (escucha en el puerto 8888).</p> <p>-nginx: Servidor web que carga el contenido de app y la configuraci\u00f3n desde conf/ldap_nginx.conf, exponiendo el puerto 8080.</p> <p>-openldap: Servidor LDAP configurado con las credenciales indicadas, escuchando en el puerto 1389.</p> <p></p> <p>Con el siguiente comando levanta los tres servicios definidos.</p> <p></p> <p>Una vez en ejecuci\u00f3n, podemos acceder a la aplicaci\u00f3n en: \"http://IP_Maq_Virtual:8080\"</p> <p></p> <p>Podemos ver que funciona.</p>"},{"location":"practica6_3docker/#despliegue-con-docker-de-php-apache-con-autenticacion-ldap","title":"Despliegue con Docker de PHP + Apache con autenticaci\u00f3n LDAP","text":"<p>Dentro de un directorio llamado Practica6.3, creamos el archivo index.php con el siguiente contenido:</p> <p></p> <p>Luego, creamos un directorio llamado Docker donde ubicaremos el Dockerfile y los archivos de configuraci\u00f3n adicionales.</p> <p></p> <p>Despues creamos el archivo \"ldap-demo.conf\" en el directorio \"Practica6.3/Docker\" con el siguiente contenido:</p> <p></p> <p>Creamos el archivo .htaccess en el directorio Practica6.3/Docker:</p> <p></p> <p>Este archivo configura la autenticaci\u00f3n b\u00e1sica para la zona protegida (en este caso, la carpeta demo).</p> <p>Desde el directorio Practica6.3 (donde se encuentra index.php y la carpeta Docker), ejecutamos:</p> <p>Para construir una imagen llamada \"docker-ldap\" usando el Dockerfile ubicado en \"./Docker/Dockerfile.\"</p> <p></p> <p></p> <p>Si todo funciona ejecutaremos el siguiente comando para levantar el contenedor:</p> <p></p> <p></p> <p>Accedemermos a la direcci\u00f3n http://tu-ip:3000/demo introducimos con las credenciales de acceso admin y Secret123.</p> <p></p> <p>Se nos ha salido la imagen final esta correcto</p>"},{"location":"practica_ampliacion/","title":"Configuraci\u00f3n de un Servidor Nginx con Hosts Virtuales y Directorios de Usuario","text":""},{"location":"practica_ampliacion/#conexion-ssh","title":"Conexi\u00f3n SSH","text":"<p>El pirmer paso ser\u00e1 conectar nuestra maquina f\u00edsica con nuestra maquina virtual mediante ssh.</p> <p></p>"},{"location":"practica_ampliacion/#creacion-de-usuarios","title":"Creacion de Usuarios","text":"<p>En este paso, creamos los usuarios necesarios utilizando el comando useradd. Es importante asignarles contrase\u00f1as seguras para garantizar la seguridad del sistema. Adicionalmente, se configuran sus directorios personales de manera autom\u00e1tica al crearlos.</p> <p></p>"},{"location":"practica_ampliacion/#creacion-de-las-carpetas","title":"Creaci\u00f3n de las Carpetas","text":"<p>Una vez creados los usuarios, accedemos con cada uno de ellos mediante el comando su. En sus directorios personales, creamos la carpeta public_html utilizando mkdir. Esta carpeta ser\u00e1 el lugar donde cada usuario almacenar\u00e1 los archivos de su p\u00e1gina web.</p> <p></p>"},{"location":"practica_ampliacion/#asignar-permisos","title":"Asignar Permisos","text":"<p>Es esencial ajustar los permisos de las carpetas public_html para que Nginx pueda acceder al contenido sin comprometer los privilegios de los usuarios. Configuramos los permisos para que el servidor pueda leer y servir los archivos web correctamente, pero manteniendo la propiedad de los archivos en manos de cada usuario.</p> <p></p> <p></p>"},{"location":"practica_ampliacion/#paginas-web-correspondientes","title":"P\u00e1ginas Web Correspondientes","text":"<p>Para comprobar que todo funciona crearemos dos archivos index.html para cada usuario en las carpetas public_html.</p> <p></p> <p></p>"},{"location":"practica_ampliacion/#configuracion-de-nginx","title":"Configuraci\u00f3n de Nginx","text":"<p>Instalaremos nginx y comprobaremos que su funcionamiento es correcto con el siguiente comando.</p> <p></p> <p></p> <p>hasta aqu\u00ed bien es siguiente pas\u00f3 ser\u00e1 generar los certificados SSL con el siguiente comando</p> <p></p> <p></p>"},{"location":"practica_ampliacion/#configuracion-hosts-virtuales","title":"Configuraci\u00f3n Hosts Virtuales","text":"<p>Ahora tendremos que configurar los host virtuales pero antes debemos crear el archivo en la carpeta <code>/etc/nginx/sites-available</code> en cada usuario correspondiente.</p> <p></p> <p></p> <p>Una vez que escrib\u00edmos el archivo de configuraci\u00f3n en sites-available, no basta con que est\u00e9 ah\u00ed; tambi\u00e9n hay que activarlo. Para hacerlo, en vez de copiar el archivo a /etc/nginx/sites-enabled/ (donde Nginx lee los sitios activos), crearemos un enlace simb\u00f3lico para cada uno. Esto permite gestionar los sitios f\u00e1cilmente, ya que podemos activarlos o desactivarlos sin mover ni duplicar archivos.</p> <p> </p>"},{"location":"practica_ampliacion/#hosts-virtuales","title":"Hosts Virtuales","text":"<p>El archivo hosts en C:\\Windows\\System32\\drivers\\etc\\hosts permitiremos asociar manualmente direcciones IP con nombres de dominio en nuestra m\u00e1quina. Para comprobar y configurar los hosts virtuales que hemos creado, debemos a\u00f1adir una l\u00ednea para cada host virtual que apunte a la direcci\u00f3n IP correspondiente.</p> <p></p> <p>No mostrar\u00e1 una advertencia, deberemos pulsar en \"aceptar el riesgo y continuar\"</p> <p></p> <p>Podremos pinchar en \"ver certificado\" para ver que su creaci\u00f3n ha sido exitosa y correcta.</p> <p> </p> <p>Finalente nos mostrar\u00e1 las 2 p\u00e1ginas de cada uno que hemos creado.</p>"}]}